// Code generated by protoc-gen-go. DO NOT EDIT.
// source: examples/echo/echo_service.proto

package echo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EchoRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Repetitions          uint32   `protobuf:"varint,2,opt,name=repetitions,proto3" json:"repetitions,omitempty"`
	StatusCode           int32    `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b557df2b2064905, []int{0}
}

func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (m *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(m, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EchoRequest) GetRepetitions() uint32 {
	if m != nil {
		return m.Repetitions
	}
	return 0
}

func (m *EchoRequest) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

type EchoResponse struct {
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b557df2b2064905, []int{1}
}

func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (m *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(m, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type EchoStreamRequest struct {
	Message              string             `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Repetitions          uint32             `protobuf:"varint,2,opt,name=repetitions,proto3" json:"repetitions,omitempty"`
	Responses            uint64             `protobuf:"varint,3,opt,name=responses,proto3" json:"responses,omitempty"`
	Interval             *duration.Duration `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	StatusCode           int32              `protobuf:"varint,5,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	FailureIndex         int32              `protobuf:"varint,6,opt,name=failure_index,json=failureIndex,proto3" json:"failure_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EchoStreamRequest) Reset()         { *m = EchoStreamRequest{} }
func (m *EchoStreamRequest) String() string { return proto.CompactTextString(m) }
func (*EchoStreamRequest) ProtoMessage()    {}
func (*EchoStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b557df2b2064905, []int{2}
}

func (m *EchoStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoStreamRequest.Unmarshal(m, b)
}
func (m *EchoStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoStreamRequest.Marshal(b, m, deterministic)
}
func (m *EchoStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoStreamRequest.Merge(m, src)
}
func (m *EchoStreamRequest) XXX_Size() int {
	return xxx_messageInfo_EchoStreamRequest.Size(m)
}
func (m *EchoStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoStreamRequest proto.InternalMessageInfo

func (m *EchoStreamRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EchoStreamRequest) GetRepetitions() uint32 {
	if m != nil {
		return m.Repetitions
	}
	return 0
}

func (m *EchoStreamRequest) GetResponses() uint64 {
	if m != nil {
		return m.Responses
	}
	return 0
}

func (m *EchoStreamRequest) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *EchoStreamRequest) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *EchoStreamRequest) GetFailureIndex() int32 {
	if m != nil {
		return m.FailureIndex
	}
	return 0
}

type EchoStreamResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoStreamResponse) Reset()         { *m = EchoStreamResponse{} }
func (m *EchoStreamResponse) String() string { return proto.CompactTextString(m) }
func (*EchoStreamResponse) ProtoMessage()    {}
func (*EchoStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b557df2b2064905, []int{3}
}

func (m *EchoStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoStreamResponse.Unmarshal(m, b)
}
func (m *EchoStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoStreamResponse.Marshal(b, m, deterministic)
}
func (m *EchoStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoStreamResponse.Merge(m, src)
}
func (m *EchoStreamResponse) XXX_Size() int {
	return xxx_messageInfo_EchoStreamResponse.Size(m)
}
func (m *EchoStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoStreamResponse proto.InternalMessageInfo

func (m *EchoStreamResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EchoStreamResponse) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "echo.v1.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "echo.v1.EchoResponse")
	proto.RegisterType((*EchoStreamRequest)(nil), "echo.v1.EchoStreamRequest")
	proto.RegisterType((*EchoStreamResponse)(nil), "echo.v1.EchoStreamResponse")
}

func init() { proto.RegisterFile("examples/echo/echo_service.proto", fileDescriptor_6b557df2b2064905) }

var fileDescriptor_6b557df2b2064905 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x4d, 0x4f, 0x83, 0x40,
	0x10, 0xcd, 0xd6, 0x7e, 0xd8, 0xa1, 0x8d, 0x71, 0x53, 0x13, 0x44, 0xa3, 0x04, 0x2f, 0x9c, 0xa8,
	0xb6, 0xf1, 0x0f, 0x68, 0x8d, 0xf1, 0x8a, 0x37, 0x2f, 0xcd, 0x16, 0xa6, 0x2d, 0x86, 0xb2, 0xb8,
	0xbb, 0x34, 0xfd, 0x01, 0xfe, 0x5a, 0x7f, 0x85, 0x81, 0xa5, 0x16, 0xd0, 0xa3, 0x17, 0xc8, 0x3c,
	0x1e, 0xf3, 0xe6, 0xbd, 0x19, 0xb0, 0x71, 0xc7, 0x36, 0x69, 0x8c, 0x72, 0x8c, 0xc1, 0x9a, 0x17,
	0x8f, 0xb9, 0x44, 0xb1, 0x8d, 0x02, 0xf4, 0x52, 0xc1, 0x15, 0xa7, 0xbd, 0x1c, 0xf3, 0xb6, 0x77,
	0xd6, 0xd5, 0x8a, 0xf3, 0x55, 0x8c, 0xe3, 0x02, 0x5e, 0x64, 0xcb, 0x71, 0x98, 0x09, 0xa6, 0x22,
	0x9e, 0x68, 0xa2, 0xf3, 0x0e, 0xc6, 0x53, 0xb0, 0xe6, 0x3e, 0x7e, 0x64, 0x28, 0x15, 0x35, 0xa1,
	0xb7, 0x41, 0x29, 0xd9, 0x0a, 0x4d, 0x62, 0x13, 0xb7, 0xef, 0xef, 0x4b, 0x6a, 0x83, 0x21, 0x30,
	0x45, 0x15, 0xe5, 0x3f, 0x4b, 0xb3, 0x65, 0x13, 0x77, 0xe8, 0x57, 0x21, 0x7a, 0x0d, 0x86, 0x54,
	0x4c, 0x65, 0x72, 0x1e, 0xf0, 0x10, 0xcd, 0x23, 0x9b, 0xb8, 0x1d, 0x1f, 0x34, 0xf4, 0xc8, 0x43,
	0x74, 0x5c, 0x18, 0x68, 0x2d, 0x99, 0xf2, 0x44, 0x62, 0x55, 0xac, 0x55, 0x13, 0x73, 0xbe, 0x08,
	0x9c, 0xe6, 0xd4, 0x57, 0x25, 0x90, 0x6d, 0xfe, 0x63, 0xb8, 0x4b, 0xe8, 0x8b, 0x52, 0x57, 0x16,
	0xa3, 0xb5, 0xfd, 0x03, 0x40, 0xef, 0xe1, 0x38, 0x4a, 0x14, 0x8a, 0x2d, 0x8b, 0xcd, 0xb6, 0x4d,
	0x5c, 0x63, 0x72, 0xee, 0xe9, 0xe0, 0xbc, 0x7d, 0x70, 0xde, 0xac, 0x0c, 0xce, 0xff, 0xa1, 0x36,
	0x1d, 0x77, 0x9a, 0x8e, 0xe9, 0x0d, 0x0c, 0x97, 0x2c, 0x8a, 0x33, 0x81, 0xf3, 0x28, 0x09, 0x71,
	0x67, 0x76, 0x0b, 0xca, 0xa0, 0x04, 0x5f, 0x72, 0xcc, 0x99, 0x01, 0xad, 0x7a, 0xfd, 0x1d, 0x4e,
	0xc3, 0xec, 0x08, 0x3a, 0xba, 0x59, 0xab, 0xb0, 0xa1, 0x8b, 0xc9, 0x27, 0x81, 0x76, 0xde, 0x86,
	0x4e, 0xcb, 0xf7, 0xc8, 0x2b, 0x6f, 0xc0, 0xab, 0x2c, 0xd8, 0x3a, 0x6b, 0xa0, 0xa5, 0xda, 0x33,
	0xc0, 0x61, 0x06, 0x6a, 0xd5, 0x48, 0xb5, 0x25, 0x58, 0x17, 0x7f, 0x7e, 0xd3, 0x6d, 0x6e, 0xc9,
	0xc3, 0xc9, 0xdb, 0xb0, 0x76, 0x9c, 0x8b, 0x6e, 0x11, 0xe0, 0xf4, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x1d, 0xa7, 0x26, 0x73, 0xb4, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	EchoStream(ctx context.Context, in *EchoStreamRequest, opts ...grpc.CallOption) (Echo_EchoStreamClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/echo.v1.Echo/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) EchoStream(ctx context.Context, in *EchoStreamRequest, opts ...grpc.CallOption) (Echo_EchoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Echo_serviceDesc.Streams[0], "/echo.v1.Echo/EchoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoEchoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_EchoStreamClient interface {
	Recv() (*EchoStreamResponse, error)
	grpc.ClientStream
}

type echoEchoStreamClient struct {
	grpc.ClientStream
}

func (x *echoEchoStreamClient) Recv() (*EchoStreamResponse, error) {
	m := new(EchoStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	EchoStream(*EchoStreamRequest, Echo_EchoStreamServer) error
}

// UnimplementedEchoServer can be embedded to have forward compatible implementations.
type UnimplementedEchoServer struct {
}

func (*UnimplementedEchoServer) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedEchoServer) EchoStream(req *EchoStreamRequest, srv Echo_EchoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoStream not implemented")
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/echo.v1.Echo/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_EchoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).EchoStream(m, &echoEchoStreamServer{stream})
}

type Echo_EchoStreamServer interface {
	Send(*EchoStreamResponse) error
	grpc.ServerStream
}

type echoEchoStreamServer struct {
	grpc.ServerStream
}

func (x *echoEchoStreamServer) Send(m *EchoStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "echo.v1.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Echo_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoStream",
			Handler:       _Echo_EchoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "examples/echo/echo_service.proto",
}
